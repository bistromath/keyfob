/* -*- c++ -*- */
/*
 * Copyright 2004,2010 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <keyfob_msg.h>
#include <gr_io_signature.h>

/*
 * Create a new instance of keyfob_msg and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
keyfob_msg_sptr 
keyfob_make_msg (gr_msg_queue_sptr queue)
{
  return gnuradio::get_initial_sptr(new keyfob_msg (queue));
}

/*
 * The private constructor
 */
keyfob_msg::keyfob_msg (gr_msg_queue_sptr queue)
  : gr_sync_block ("keyfob_msg",
	      gr_make_io_signature (1, 1, sizeof (float)),
	      gr_make_io_signature (0, 0, 0)),
          d_queue(queue)
{

}

/*
 * Our virtual destructor.
 */
keyfob_msg::~keyfob_msg ()
{
    
}

int 
keyfob_msg::work (int noutput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
  const float *in = (const float *) input_items[0];
  //all this thing does is look for a correlator bit and post a message based on the data if it finds one
  //pretty simple
  int i = 0;
  for(i; i < noutput_items; i++) {
      
  }

  consume_each (noutput_items);

  // Tell runtime system how many output items we produced.
  return 0;
}
