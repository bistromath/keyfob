/* -*- c++ -*- */
/*
 * Copyright 2004,2010 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <keyfob_msg.h>
#include <gr_io_signature.h>
#include <stdio.h>
#include <iostream>

/*
 * Create a new instance of keyfob_msg and return
 * a boost shared_ptr.  This is effectively the public constructor.
 */
keyfob_msg_sptr 
keyfob_make_msg (gr_msg_queue_sptr queue, double rate, double threshold)
{
  return gnuradio::get_initial_sptr(new keyfob_msg (queue, rate, threshold));
}

/*
 * The private constructor
 */
keyfob_msg::keyfob_msg (gr_msg_queue_sptr queue, double rate, double threshold)
  : gr_sync_block ("keyfob_msg",
	      gr_make_io_signature (1, 1, sizeof (float)),
	      gr_make_io_signature (0, 0, 0)),
    d_queue(queue),
    d_rate(rate),
    d_threshold(threshold)
{
    int bitrate = 2400;
    d_spb = d_rate / bitrate;
    
    set_history(d_spb * 150); //128-bit packets
    set_output_multiple(5000);
}

/*
 * Our virtual destructor.
 */
keyfob_msg::~keyfob_msg ()
{
    
}

int 
keyfob_msg::work (int noutput_items,
			       gr_vector_const_void_star &input_items,
			       gr_vector_void_star &output_items)
{
  const float *in = (const float *) input_items[0];
  const float *end = in + noutput_items;
  const float *begin = in;
  
  const int guard_len = d_spb * 150;
  
  while(in < end-guard_len) {
      switch(state) {
      case IDLE: //looking for preamble
        if(*in > d_threshold && (in[1] <= in[0])) { //this is a candidate for the first mark in the preamble
            //std::cout << "found start at " << in-begin << std::endl;
            //for(int i=0;i<40;i++) std::cout << in[i] << " ";
            //std::cout << std::endl;
            state = DATA;
            pos = 39; //40 data bits in a packet, including preamble, 0-referenced
            bit_pos = LOOKING_FOR_MARK;
            d_ref = *in * 0.5;
            d_data = 0;
        }
        else { in++; }
        break;
      case DATA:
        switch(bit_pos) {
            case LOOKING_FOR_MARK:
                if(*in > d_ref) {
                    bit_pos = LOOKING_FOR_SPACE;
                } else {
                    state = IDLE;
                }
                break;
            case LOOKING_FOR_SPACE:
              if(*in < d_ref) { //here's the edge of the space bit
                in += int(d_spb * 1.5); //move to the center of the data bit
                bit_pos = GETTING_DATA;
              } else { in++; }
              break;
            case GETTING_DATA:
              if(*in > d_ref) {
                  d_data += (uint64_t(1) << pos);
              }
              pos--;
              
              if(pos < 0) { //end of our message, let's post it
                  //post message
                  uint16_t addr, switches;
                  bool success = parse_pkt(d_data, addr, switches);
                  if(success) {
                    std::ostringstream payload;
                    payload << d_ref << " " << addr << " " << switches;
                    gr_message_sptr msg = gr_make_message_from_string(std::string(payload.str()));
                    d_queue->handle(msg);
                  }
                  state = IDLE;
              }
              in += int(d_spb); //move ahead to the center of the next mark bit
              bit_pos = LOOKING_FOR_MARK;
              break;
          }
        break;
        }
  }
  
  return noutput_items - (end-in);
}

bool keyfob_msg::parse_pkt(uint64_t &data, uint16_t &addr, uint16_t &switches) {
//there are 2 bits per addr/switch; [01] is LOW, [11] is Z, [00] is HIGH
//i'm pretty sure it's actually inverted
    addr = 0;
    switches = 0;
    //validate preamble
    if((data >> 36) != 10) return false;
    //skip the damn address right now, you don't have a way to test it anyway
    for(int i=0; i<8; i++) {
        switches += (data & (1 << (i*2))) ? 0 : (1 << i);
    }
    return true;
}
